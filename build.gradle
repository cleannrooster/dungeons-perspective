plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://maven.shedaniel.me/' }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.terraformersmc.com/" }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven { url 'https://maven.wispforest.io' }

    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven { url = "https://api.modrinth.com/maven" }

    maven { url 'https://maven.kosmx.dev/' }
    maven{ url"https://maven.bawnorton.com/releases"}
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation("maven.modrinth:spell-engine:${project.spell_engine_version}")
    include(implementation("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}"))
    modImplementation "maven.modrinth:combat-roll:2.0.4+1.21.1-fabric"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim_version}")
    modImplementation("maven.modrinth:spell-power:${project.spell_power_version}")
    modImplementation("dev.emi:trinkets:${project.trinkets_version}")
    modImplementation("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0")
    include("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0")
    annotationProcessor(("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0"))
    modApi(modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    // only if you plan to use owo-config
    annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    modCompileOnly fileTree(dir: "run/mods", includes: ['*.jar'])

    modImplementation "maven.modrinth:sodium:${rootProject.sodium_version}-fabric"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "minecraft-xiv" // This can be the project ID or the slug. Either will work!
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = [project.minecraft_version] // Must be an array, even with only one version
    loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle

    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api" // Creates a new required dependency on Fabric API
        required.version "yacl", project.yacl_version
        optional.version "modmenu", project.modmenu_version
        // Creates a new optional dependency on this specific version of Sodium
    }
    syncBodyFrom = rootProject.file("README.md").text
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
